HW3 Design:

Class: cscie160.hw3.Passenger
	This class represents a passenger.  It has two primary data elements, the 
current floor the passenger is on, and the destination floor where he wants to
go.  These data elements are private.  There are accessor methods for those 
elements, and there is an "arrive" method to call when the passenger arrives at 
the destination.

Methods:

Constructor:
	There is one constructor for this class, and it requires a value for both
the current floor and the destination floor.  

Accessors:
	There are get and set methods for each of the two data elements in
Passenger.  They are getCurrentFloor(), setCurrentFloor(int), 
getDestinationFloor(), and setDestinationFloor(int).

Arrive:
	This method is invoked when a passenger arrives on a floor.  It accepts a 
Floor object as a parameter, which is supposed to be the floor the user has 
arrived at.  The method then updates the current floor value to be the floor 
number of the floor object passed in.


Class: cscie160.hw3.Elevator:
	This class has had a number of enhancements over the previous homework 
version.  Most of them center around incorporating the new Passenger class.  
The elevator should have a passenger object for each passenger that is on board,
and they should be organized around which floor they're destined for.  Previous
versions of this class used a simple array of integers as a count of how many 
passengers were destined for each floor.  The array has been expanded to contain
ArrayList<Passenger> objects.  This allows the number of passengers destined for
a given floor to grow and shrink as necessary.  Using an array to represent the
different floors makes sense, since the number of floors in a building should
never really vary or need to grow and shrink.

Methods:

Constructor:
	The constructor was modified to initialize the array of 
ArrayList<Passenger>s.  Each element of the elevPassengers array is initialized
with a new ArrayList<Passenger>.

Main:
	The main method demonstrates the behavior of this array of ArrayLists of 
Passenger objects.  It starts out by creating 9 passengers headed to 3 
different floors by calling the boardPassenger method.  The main method 
initializes each floor, besides the first, with somewhat random numbers of 
passengers headed to different floors.  A convenience method (initFloorForTest)
is used to populate each floor object.  It then takes 19 distinct calls to the
move method to fully exercise the classes and have all passengers delivered to
where they want to go.  The elevator will travel to the top and back down again 
three times.

Move:
	The move method needs a slight modification to get the size of the ArrayList
for the current floor to determine if any passenger want to get off on that 
floor.  I discovered a bug in this method.  If passengers were on the top floor, 
they would not be picked up because the direction had not been changed to DOWN 
at the right time.  After incrementing the current floor counter going up (or 
decrementing it going down), testing at that point to see if the direction 
needed to be changed was the correct place to do it.  The previous version of 
the method left the direction as up, even though the elevator was at the top 
floor.  The unloadPassengers method would look to the goingUp collection of the 
floor to board passengers, but on the top floor there should never be passengers
going up.  Changing the direction before calling stop corrects this problem.  
Now passengers will not be forever stuck on the top floor.

Stop:
	Because the elevator class now has two boolean arrays for stop requests, one 
for requests to go up and one for going down, the stop method needs to clear 
requests for the floor in the correct direction.  Once that flag is cleared for
the current floor, the floor's unloadPassengers method is called.

Board Passenger:
	This method now accepts a passenger object as the parameter.  The passenger
object contains the current and destination floor values.  Using the destination
floor value as the index into the elevPassengers array, the passed in passenger
object is added to the collection of passengers destined for the particular 
floor.

Register Request:
	The registerRequest method needed a new parameter added to indicate which
direction the request was for.  This would indicate which request array, either
upCalls or downCalls, gets updated.

To String:
	The requirements specified that the toString method should also gather 
information about each passenger on the elevator when called.  Since this method
would now need to loop through an array for the floors and then an ArrayList for
the passengers headed for that floor, I now use a StringBuffer to gather the 
passnger details.  I also use some newline (\n) and tab (\t) characters to 
format the output to make it more readable.


Class: cscie160.hw3.Floor
	This class had one major change to it, in that it uses collections to 
organize passengers.  I used ArrayList<Passenger> to hold the groups of 
passengers that were going up, going down, and had arrived "on the floor".  The
on floor passengers for this version weren't necessarily going anywhere else, 
but we now had a way to differentiate between passengers that were going up and 
those going down.  All three collections were ArrayList<Passenger>.
	I also added a floor number data element so the floor object knows what 
floor in a building it represents.

Methods:

Constructors:
	There are two constructors in this class.  The no argument constructor 
assumes the floor number is the first floor.  The other constructor accepts an
integer value that represents the floor number.  Both constructors call a 
private method to initialize the three different collections.

Unload Passengers:
	Since the elevator and floor objects use ArrayLists, we can take advantage
of some of the methods and looping constructs for manipulating them.  For each
passenger getting off the elevator, we can simply add that person to the "on
floor" collection directly.  The passenger's arrive method is called to update
their current floor value.  Once all the passengers have been added to the 
floor, the collection for the destination floor is cleared using the clear()
method.
	For boarding passengers from the current floor to the elevator we again use
collection iteration (e.g. for (Passenger pass:goingUp)).  This allows us to 
board one passenger at a time until either all passengers are on or the elevator
gets full.  As we are boarding passengers, we add them to a temporary collection
so that the boarded passengers (and only the boarded passengers) get removed
from either the goingUp or goingDown collection respectively.

Accessor Methods:
	With the new floor number data element, new getter and setter methods were
created.  The getFloorNum method is public because anyone should be able to ask
what the number is for a given floor, but the setFloorNum method is protected
so that only subclasses and classes in the same package could possibly change 
the floor number.
	For the three collections of passengers on the floor, three getter methods
were created, but no set methods.  Those collections should only be modified 
by the unloadPassengers method.

To String:
	The toString method simply details the floor number along with the number 
of passengers in each collection in a single line of string text.


--------------------------------------------------------------------------------
HW2 Design:
Class: cscie160.hw2.Floor
	This class represents a floor in the building the elevator is operating in.
It is pretty simple at this point. It simply holds a number of passengers 
waiting to go to the first floor, and it performs the process of unloading and
loading passengers when the elevator arrives at the floor.

Methods:

Constructors:
	I created two constructor methods for this class.  The no argument 
constructor initializes the floor's passenger count to zero.  The second one 
takes an integer to represent the initial number of passengers waiting for an 
elevator.

unloadPassengers:
	This method accepts an Elevator object as a parameter.  First it unloads
passengers from the elevator, and then it loads any waiting passengers on the 
elevator.  For unloading passengers, it retrieves the number of passengers
destined for the current floor.  It then zeros out the destination array element
for the current floor.  This indicates that no passengers remain waiting for the
floor.  This method will then decrease the total passenger count for the 
elevator by the number of passengers that exited.

	Then this method will use the boardPassenger method on the elevator object
to board passengers one at a time.  All passengers boarded will be heading to 
the ground floor (1).  As it is boarding passengers it will catch the elevator
full exception.  This exception is handled by re-registering a stop request 
with the elevator, and putting out a simple message to standard out (the 
console).


Class: cscie160.hw2.ElevatorFullException
	This class is a simple exception used for flagging that an elevator is full.
It extends java.lang.Exception, and it has its own message String variable.

Methods:

Constructor:
	I coded one constructor that accepts a message string, which is stored in 
the member variable "message".  I rely on the parent exception class for the no
argument constructor.  This project will only use the constructor that takes a
message.

getMessage:
	This method simply returns the message the exception was created with.


Class: cscie160.hw2.Elevator
	Some changes were necessary to this class from the previous assignment.  A 
new array of Floor objects is used to represent the floors in the building, and 
a boolean array will be used to signify floors requesting a stop for people 
waiting.

	I decided to use log4j to replace System.out.println, and it is configured 
to simply log messages to System.out.

Methods:

Main:
	This method will demonstrate the behavior of stopping at multiple floors,
handling the elevator full exception, and floors that have passengers requesting 
the elevator to pick them up.  It starts by loading passengers onto three 
different floors.  Floor 2 gets 4 passengers, floor 4 gets 6 passengers, and 
floor 6 gets 5 passengers.  It further initializes the elevator with passengers
going to different floors.  It starts with 6 passengers wanting to go to the 
3rd floor, and it then adds a passenger destined for floor 4 and floor 7.

	It takes twelve calls to the move method for the elevator to successfully
deliver everyone to their destined floors and pick everyone up from the various
floors they are waiting on.  The elevator goes up to the top floor and back to
the first floor twice during this run.

Move:
	The move method needed a slight enhancement.  Previously it would only call
the stop method when there were passengers on the elevator who wanted to get 
off at the current floor.  Now, it has to account for floors where passengers
have requested elevator service.  Either condition should cause the stop method
to be called. 

Stop:
	As specified in the assignment, the stop method passes control to the 
Floor.unloadPassengers method.  If there was a stop request for the current 
floor, the stop method will clear it by setting the floor's "calling request"
element to false.

Board Passenger:
	This method now tests to see if the elevator is at capacity.  If it is at 
capacity, it will now throw the ElevatorFullException exception, as well as 
logging the fact.

Register Request:
	This new method will be called by a floor where there are people waiting for
an elevator.  It simply sets to true the element of the callingFloors array for
the passed in floor.

Get Calling Floor:
	This new method accepts a floor number and will return a boolean to the 
caller indicating whether or not a passenger on the floor has requested an 
elevator to pick them up.


Previous notes follow below.
HW1 Design:

Class: cscie160.hw1.Elevator
	This class represents an elevator.  As specified in the requirements there
are a number of required methods, such as move, stop, and board passengers.  A
couple of constants were suggested as well for elevator capacity and number of
floors in the building.

	In thinking about these methods, constants for the two directions (up and 
down) seemed appropriate as well.  Since there are only two possible values, I 
decided to make these constants boolean.  Arbitrarily I made up equivalent to 
true, leaving down to be false.

	The assignment specified data members for current floor and current 
direction.  An array of integers for the destination define how many passengers 
want to go to each floor.  I defined another convenience member to contain the 
total number of passengers in the elevator.

	A special note should be made about the current floor and destination array
member variables.  The current floor variable is used as an index into the 
array of destination floors.  In the real world, buildings don't normally have 
a floor 0.  The first floor is floor 1.  In arrays, the elements are zero based
so adjustments need to be taken into consideration.  Methods that accept a
floor value should be decrement that value to represent the array element for 
that floor.  Conversely when the value of the current floor needs to be 
displayed, it needs to be incremented.

Methods:

Constructor:
	The assignment specified that a no argument constructor initialize the 
elevator's state.  It sets the current floor to 0 (which represents the first
floor), the current direction to up, and initializes the destination array to 
be all zeros.

move:
	This method will move the elevator until it stops at a floor for a passenger
(or multiple passengers) to get off the elevator.  If the current direction is 
up, the current floor will be incremented, and it will be decremented if it is 
down.

stop:
	This method is invoked when the elevator arrives at a floor where at least
one passenger wants to get off the elevator.  It will decrement the total number
of passengers in the elevator by those getting off, and it will zero out the 
destination array for that floor.  It then calls the toString method to display
the current state of the elevator.

boardPassenger:
	This method provides a means for a single passenger to board the elevator 
and select a destination floor.  The destination array is incremented at the 
appropriate index (floor - 1), and the total passenger count is incremented as 
well.

toString:
	This method overrides the default toString method in Object, and it displays
relevant information such as the current floor, current direction, and the total
number of passengers on the elevator.

main:
	This method allows for a simple, prescribed demo of the elevators
functioning.  It boards three passengers.  Two are destined for the second 
floor, and the third is going to the third floor.  It then uses a simple for 
loop to call the move method three times.

Accessor methods:
	I also created a number of methods to get and set the state of the elevator.
These methods all have default package level visibility, and they are used by
a test class I wrote to help test out the methods referenced above.


Submission notes:
	When I ran the javadoc tool, it gave me a complete "apidocs" site.  I have
included that within the jar file.  Use the index.html file to look at the 
javadoc documentation produced.